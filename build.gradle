apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'signing'
apply plugin: 'ssh'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.webcerebrium"
archivesBaseName = "etherdelta-api"
version = '1.0.4'
mainClassName = "com.webcerebrium.etherdelta.examples.App";

def distribution = "java-etherdelta-api"

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.hidetake:gradle-ssh-plugin:0.1.7")
    }
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

dependencies {

    // JSON parsing / handling
    compile group: 'org.json', name: 'json', version: '20160810'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    // TESTING
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // SIMPLE LOGGING
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.16'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.2'

    // APACHE COMMONS for WHOIS NET REQUESTS
    compile 'commons-net:commons-net:3.3'
    // APACHE COMMONS IO
    compile 'commons-io:commons-io:2.4'
    // COMMON CODECS
    compile 'commons-codec:commons-codec:1.9'
    // APACHE COMMONS COLLECTION
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    // GUAVA
    compile group: 'com.google.guava', name: 'guava', version: '19.0'

    // Lombok, Improving logging
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.4'

    // JETTY WEBSOCKET CLIENT
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.4.7.v20170914'
    // ADDITIONAL LIBRARY TO CREATE SOCKET PACKETS (used for socket.emit)
    // compile 'com.codeminders.socketio:socket-io:1.0.3'

    // WEB3J INTERFACE. See more at https://docs.web3j.io/getting_started.html
    compile 'org.web3j:core:2.3.1'

    // NOTIFICATION TO SLACK
    compile group: 'com.webcerebrium', name: 'slack-notification', version: '0.1.0'
}

ssh {
    config(StrictHostKeyChecking: 'no')
}
remotes {
    staging {
        host = deploy_host
        user = deploy_username
        password = deploy_password
    }
}

def deploy(def server, def folder) {
    logger.lifecycle("Deploying to $server folder $folder. Please be patient .. takes time ...")
    logger.lifecycle("Copying ${distZip.archivePath.absolutePath}, archiveName=$distZip.archiveName")
    sshexec {
        session(server) {
            put(distZip.archivePath.absolutePath, distZip.archiveName)
            execute "rm -rf $folder/$distribution* $folder/$distribution*.*"
            execute "mv -f ~/$distZip.archiveName /opt/$distZip.archiveName"
            execute "unzip -qq -d $folder $folder/$distZip.archiveName"
        }
    }
}

task deployStaging << {
    deploy(remotes.staging, deploy_folder)
}
deployStaging.dependsOn distZip




uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Etherdelta Java API Client'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Etherdelta Cryptocurrency Exchange API Client'
                url 'https://github.com/webcerebrium/java-etherdelta-api'

                scm {
                    url 'scm:git@github.com/webcerebrium/java-etherdelta-api.git'
                    connection 'scm:git@github.com/webcerebrium/java-etherdelta-api.git'
                    developerConnection 'scm:git@github.com/webcerebrium/java-etherdelta-api.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id 'wcrbrm'
                        name 'Viktor Lopata'
                        email 'v.lopata@webcerebrium.com'
                    }
                }
            }
        }
    }
}
